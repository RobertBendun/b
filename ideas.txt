-----------------------------------------------------------
Word addressing vs byte addressing
-----------------------------------------------------------

So dereference and pointer arithmetic in B would operatre on bytes by default.
I would see some functions that would either get or set specific bit lengths:

i8(p) returns 8 bit signed int at p, extended to the word (respects signed bit)
i8(p, v) writes 8 bit signed int at p, respecting sign
u8(p), u8(p, v) same for unsigned 8 bit

and similarly for i16, i32, i64, u8, u16, u32, u64 (64 versions for completness)

this pattern allows us to also define floating point functions, they would do standard to integer rounding like in C when converting from float to int: f16, f32, f64, f80, f128

What shoul be considered is that this solution doesn't allow for passing float values via function calls
it may be separate or shared issue depending on the path the language takes


-----------------------------------------------------------
Anonymous functions
-----------------------------------------------------------

Since main() return 10; is proper function declaration in B, we have clear path for very easy anonymous function syntax, for example:
  \() return 10;
Note that this is just anonymous function - it doesn't hold any state and cannot reference any of the surrunding context.
For all purposes it should be considered as:

main() { (\() {})(); }
\() {} is the same as
__compile_time_generated_symbol(){}
main() { __compile_time_generated_symbol(); }

Example of usage:
iota(n, f) {
	auto i, total;
	for (i = 1; i < n; ++i) {
		f(i);
	}
}

iota_reduce(n, f) {
	auto i, r;
	for (i = 1; i < n; ++i) {
		r = f(r, i);
	}
	return r;
}

factorial(n) return iota_reduce(n, \(r, i) return r * i;);

main() {
	iota(10, \(x) printf("%d\n", x););
	printf("5! = ", factorial(5));
}
