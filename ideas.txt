-----------------------------------------------------------
Using simple definitions as an alternative to inline asm
-----------------------------------------------------------

By adding mechanism to declare where simple definitions are located
inside an object file we can provide very primitive support for an
inline assembly - by just allowing programmer to put raw bytes inside
executable section. This will allow for cumbersome but self contained
definition of libb in B.

// $ cat syscall.asm
// format ELF64
// section ".text" executable
// ; TODO: Save registers if required
// ; Shift all registers left so
// ; syscall(a, b, c, d) is the same as
// ; calling syscall number a with arguments b, c, d
// public _syscall as 'syscall'
// _syscall:
//         push rbp
//         mov rbp, rsp
//         mov rax, rdi
//         mov rdi, rsi
//         mov rsi, rdx
//         mov rdx, rcx
//         syscall
//         leave
//         ret
// $ fasm syscall.asm
// $ objdump -d syscall.o
// 0000000000000000 <syscall>:
//    0:   55                      push   %rbp
//    1:   48 89 e5                mov    %rsp,%rbp
//    4:   48 89 f8                mov    %rdi,%rax
//    7:   48 89 f7                mov    %rsi,%rdi
//    a:   48 89 d6                mov    %rdx,%rsi
//    d:   48 89 ca                mov    %rcx,%rdx
//   10:   0f 05                   syscall
//   12:   c9                      leave
//   13:   c3                      ret
#[section("executable")]
syscall
	0xe5_89_48_55,
	0x48_f8_89_48,
	0x48_f7_89_48,
	0x48_d6_89_48,
	0x0f_ca_89_48,
	0x00_c3_c9_05;

SYS_write 1;
STDOUT_FILENO 1;

main() {
	syscall(SYS_write, STDOUT_FILENO, "hello, world\n", 13);
}

-----------------------------------------------------------
goto
-----------------------------------------------------------

`auto` allocates data on the stack. Currently we emit stack resize on possibly each stack resize.
Additionally on each `}` we decrease stack size to the previous one, recorded by `{`.

This makes `goto` extremely dengerous - leading to the potential linear stack allocation for loops
or maybe even stack frame destruction by the wrong usage of `}`.

Example dengerous fragments:


// Linear allocation:
again: { auto a; goto again; }

-----------------------------------------------------------
Word addressing vs byte addressing
-----------------------------------------------------------

So dereference and pointer arithmetic in B would operatre on bytes by default.
I would see some functions that would either get or set specific bit lengths:

i8(p) returns 8 bit signed int at p, extended to the word (respects signed bit)
i8(p, v) writes 8 bit signed int at p, respecting sign
u8(p), u8(p, v) same for unsigned 8 bit

and similarly for i16, i32, i64, u8, u16, u32, u64 (64 versions for completness)

this pattern allows us to also define floating point functions, they would do standard to integer rounding like in C when converting from float to int: f16, f32, f64, f80, f128

What shoul be considered is that this solution doesn't allow for passing float values via function calls
it may be separate or shared issue depending on the path the language takes


-----------------------------------------------------------
Anonymous functions
-----------------------------------------------------------

Since main() return 10; is proper function declaration in B, we have clear path for very easy anonymous function syntax, for example:
  \() return 10;
Note that this is just anonymous function - it doesn't hold any state and cannot reference any of the surrunding context.
For all purposes it should be considered as:

main() { (\() {})(); }
\() {} is the same as
__compile_time_generated_symbol(){}
main() { __compile_time_generated_symbol(); }

Example of usage:
iota(n, f) {
	auto i, total;
	for (i = 1; i < n; ++i) {
		f(i);
	}
}

iota_reduce(n, f) {
	auto i, r;
	for (i = 1; i < n; ++i) {
		r = f(r, i);
	}
	return r;
}

factorial(n) return iota_reduce(n, \(r, i) return r * i;);

main() {
	iota(10, \(x) printf("%d\n", x););
	printf("5! = ", factorial(5));
}
